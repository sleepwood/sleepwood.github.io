<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sleepwood.github.io</id>
    <title>技术小栈</title>
    <updated>2020-02-09T16:06:41.637Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sleepwood.github.io"/>
    <link rel="self" href="https://sleepwood.github.io/atom.xml"/>
    <subtitle>一个先记后看的技术堆栈</subtitle>
    <logo>https://sleepwood.github.io/images/avatar.png</logo>
    <icon>https://sleepwood.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 技术小栈</rights>
    <entry>
        <title type="html"><![CDATA[使用H5ai搭建属于自己的目录显示程序]]></title>
        <id>https://sleepwood.github.io/post/h5ai-install</id>
        <link href="https://sleepwood.github.io/post/h5ai-install">
        </link>
        <updated>2020-02-09T07:44:06.000Z</updated>
        <summary type="html"><![CDATA[<p>有时候我们需要分享文件或者随时使用某些文件时，除了使用百度微软等网盘进行分享外，还可以直接把文件存储到自己的服务器上然后搭建目录显示程序进行分享。市面上目录显示程序很多，本文记录一下如何使用H5ai搭建目录显示程序。</p>
]]></summary>
        <content type="html"><![CDATA[<p>有时候我们需要分享文件或者随时使用某些文件时，除了使用百度微软等网盘进行分享外，还可以直接把文件存储到自己的服务器上然后搭建目录显示程序进行分享。市面上目录显示程序很多，本文记录一下如何使用H5ai搭建目录显示程序。</p>
<!-- more -->
<h3 id="系统要求">系统要求</h3>
<p>必须要求：</p>
<ul>
<li>PHP version &gt;= 5.5.0</li>
<li>apache, lighttpd 或 nginx</li>
</ul>
<p>可选要求：</p>
<ul>
<li>图片查看支持：PHP GD 插件</li>
<li>视频查看支持：avconv or ffmpeg 软件</li>
<li>PDF查看支持：convert or gm</li>
</ul>
<h3 id="程序安装">程序安装</h3>
<p>首先从英文官网上下载软件安装包 <a href="https://larsjung.de/h5ai/">h5ai</a> 点击右边按钮即可下载</p>
<blockquote>
<p>尽量不要从github上下载，因为下载下来需要手动编译，不如直接使用压缩包安装方便</p>
</blockquote>
<p>把下载的程序包解压会看到_h5ai这个文件夹，将其上传到你的web目录，这时你的目录大概是这个样子。</p>
<pre><code>DOC_ROOT
 ├─ _h5ai
 ├─ your files
 └─ and folders
</code></pre>
<p>访问 http://你的网址/_h5ai/public/index.php 访问程序的安装界面，可以根据安装界面的提示查看程序当前有效的功能。<br>
到目前为止还不能访问搭建的网站，还需要把 <code>/_h5ai/public/index.php</code> 加入到默认首页栏中<br>
<strong>Apache httpd(.htaccess)</strong></p>
<pre><code>DirectoryIndex  index.html  index.php  /_h5ai/public/index.php
</code></pre>
<p><strong>lighttpd(lighttpd.conf)</strong></p>
<pre><code>index-file.names += (&quot;index.html&quot;, &quot;index.php&quot;, &quot;/_h5ai/public/index.php&quot;)
</code></pre>
<p><strong>nginx(in nginx.conf)</strong></p>
<pre><code>index  index.html  index.php  /_h5ai/public/index.php;
</code></pre>
<p>重启对应的web服务端即可应用修改，现在可以访问搭建的网站了。</p>
<blockquote>
<p>程序安装后仍然可以通过 http://你的网址/_h5ai/public/index.php 访问程序的安装界面</p>
</blockquote>
<h3 id="程序配置">程序配置</h3>
<p>登陆网站后，如果对网站的布局、显示方式等不满意，可以通过h5ai提供的丰富的配置文件进行修改。配置文件在<code>_h5ai/private/conf/options.json</code>，打开配置文件后对程序进行深度自定义，下面记录一下我经常用到的几项配置设置。</p>
<pre><code>    &quot;autorefresh&quot;//是否开启自动更新
    &quot;crumb&quot; //可点击的面包屑导航
    &quot;download&quot;//下载功能，可以自选下载解析方式
    &quot;info&quot;//文件信息
    &quot;l10n&quot;//国际化 | 翻译
    &quot;preview-img&quot;//图片浏览格式
    &quot;search&quot;//是否开启搜索功能
    ……
</code></pre>
<p>配置文件的完整翻译会发一篇新的笔记专门记录，传送门在这里……</p>
<blockquote>
<p>引用链接<br>
<a href="https://larsjung.de/h5ai/">lrsjng/h5ai</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx 反向代理本机端口]]></title>
        <id>https://sleepwood.github.io/post/nginx-proxy</id>
        <link href="https://sleepwood.github.io/post/nginx-proxy">
        </link>
        <updated>2020-02-04T05:15:08.000Z</updated>
        <summary type="html"><![CDATA[<p>除了部署网站外，有时候我还会部署其他类型的服务，它们总是会使用其他端口。为了方便访问和管理，我们会使用Nginx或者Caddy来反向代理本机端口。本文在此记录一下如何配置Nginx来进行域名反代。如果想使用SSL将相应<code>#</code>号删除即可。</p>
]]></summary>
        <content type="html"><![CDATA[<p>除了部署网站外，有时候我还会部署其他类型的服务，它们总是会使用其他端口。为了方便访问和管理，我们会使用Nginx或者Caddy来反向代理本机端口。本文在此记录一下如何配置Nginx来进行域名反代。如果想使用SSL将相应<code>#</code>号删除即可。</p>
<!-- more -->
<p>在Nginx配置文件中新建一个虚拟主机，将下面的代码复制并替换</p>
<blockquote>
<p>注意事项：</p>
<ul>
<li>proxy_pass http://127.0.0.1:1234;中的HTTP,请勿写成HTTPS.</li>
<li>proxy_pass http://127.0.0.1:1234;中1234端口为frps的HTTP端口.</li>
<li>proxy_set_header Host $host:80;注意需加上80端口,否则会无限循环301跳转,导致网页打不开提示重定向次数过多ERR_TOO_MANY_REDIRECTS.</li>
</ul>
</blockquote>
<pre><code>server {
    listen 80;
    #listen 443 ssl http2;
    #你要绑定的域名
    server_name *.yourdomain.com;

    # 301 强制http跳转https
    #if ($scheme = http) {
    #    return  301 https://$host$request_uri;
    #}

    #SSL证书
    #ssl_certificate /usr/local/nginx/conf/ssl/yourdomain.com.crt;
    #ssl_certificate_key /usr/local/nginx/conf/ssl/yourdomain.com.key;

    client_max_body_size 50m; 
    client_body_buffer_size 256k;
    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;
    proxy_connect_timeout 300s; 
    proxy_read_timeout 300s; 
    proxy_send_timeout 300s;
    proxy_buffer_size 64k; 
    proxy_buffers 4 32k; 
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k; 
    proxy_ignore_client_abort on; 

    location / {
        #被绑定的本机端口
        proxy_pass http://127.0.0.1:1234;
        proxy_redirect off;
        proxy_set_header Host $host:80;
        proxy_ssl_server_name on;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
</code></pre>
<blockquote>
<p>引用链接：<br>
<a href="https://docs.ioiox.com/#/configuration/nginx-proxy-pass-frps-conf">Nginx 反向代理frps</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Docker Compose搭建属于自己的Bitwarden服务器]]></title>
        <id>https://sleepwood.github.io/post/bitwarden-docker</id>
        <link href="https://sleepwood.github.io/post/bitwarden-docker">
        </link>
        <updated>2020-02-03T11:01:39.000Z</updated>
        <summary type="html"><![CDATA[<p>随着日常接触到越来越多的平台，越发需要一个靠谱的密码管理工具，之前使用过Keepass但是因为它基于文件存储，同步备份都很困难，又不喜欢1password等一众闭源解决方案——把密码放在别人手里还是有点难受。就在这时，Bitwarden走入了我的视野，开源，云同步，自定义，基本上满足了我对密码管理工具的全部要求。在这里记录一下我是如何使用Docker Compose搭建服务器的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>随着日常接触到越来越多的平台，越发需要一个靠谱的密码管理工具，之前使用过Keepass但是因为它基于文件存储，同步备份都很困难，又不喜欢1password等一众闭源解决方案——把密码放在别人手里还是有点难受。就在这时，Bitwarden走入了我的视野，开源，云同步，自定义，基本上满足了我对密码管理工具的全部要求。在这里记录一下我是如何使用Docker Compose搭建服务器的。</p>
<!-- more -->
<p>在终端中运行下面的命令安装 Docker。</p>
<pre><code>curl -sSL https://get.daocloud.io/docker | sh 
#启动docker
sudo service docker start
</code></pre>
<p>Docker Compose 负责快速在集群中部署分布式应用，本文使用 docker-compose 来管理服务。在本文中我们将使用它来搭建Bitwarden_RS服务器，并使用Caddy代理把WebSocket请求重定向到我们设置好的域名当中。</p>
<pre><code>curl -L https://get.daocloud.io/docker/compose/releases/download/1.12.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>你可以通过修改URL中的版本，可以自定义您的需要的版本。<br>
接下来复制下面的代码创建一个 docker-compose.yml 文件:</p>
<pre><code># docker-compose.yml
version: '3'

services:
  bitwarden:
    image: bitwardenrs/server
    restart: always
    volumes:
      - ./bw-data:/data
    environment:
      WEBSOCKET_ENABLED: 'true' # Required to use websockets
      SIGNUPS_ALLOWED: 'true'   # set to false to disable signups
      WEB_VAULT_ENABLED: &quot;true&quot; #web客户端

  caddy:
    image: abiosoft/caddy
    restart: always
    volumes:
      - ./Caddyfile:/etc/Caddyfile:ro
      - caddycerts:/root/.caddy
    ports:
      - 80:80 # needed for Let's Encrypt
      - 443:443
    environment:
      ACME_AGREE: 'true'              # agree to Let's Encrypt Subscriber Agreement
      DOMAIN: 'bitwarden.example.org' # CHANGE THIS! Used for Auto Let's Encrypt SSL
      EMAIL: 'bitwarden@example.org'  # CHANGE THIS! Optional, provided to Let's Encrypt

volumes:
  caddycerts:
</code></pre>
<p>然后编辑Caddyfile文件 (不需要进行修改):</p>
<pre><code># Caddyfile
{$DOMAIN} {
    tls {$EMAIL}
    gzip

    header / {
        # Enable HTTP Strict Transport Security (HSTS)
        Strict-Transport-Security &quot;max-age=31536000;&quot;
        # Enable cross-site filter (XSS) and tell browser to block detected attacks
        X-XSS-Protection &quot;1; mode=block&quot;
        # Disallow the site to be rendered within a frame (clickjacking protection)
        X-Frame-Options &quot;DENY&quot;
        # Prevent search engines from indexing (optional)
        #X-Robots-Tag &quot;none&quot;
    }

    # The negotiation endpoint is also proxied to Rocket
    proxy /notifications/hub/negotiate bitwarden:80 {
        transparent
    }

    # Notifications redirected to the websockets server
    proxy /notifications/hub bitwarden:3012 {
        websocket
    }

    # Proxy the Root directory to Rocket
    proxy / bitwarden:80 {
        transparent
    }
}
</code></pre>
<p>运行</p>
<pre><code>docker-compose up -d
</code></pre>
<p>来创建并启动这些容器，系统会在两个容器间创建一个私有网络来进行反向代理，只有Caddy被暴露在外。<br>
运行</p>
<pre><code>docker-compose down
</code></pre>
<p>停止并删除容器</p>
<blockquote>
<p>引用链接：<br>
<a href="https://github.com/dani-garcia/bitwarden_rs/wiki/Using-Docker-Compose">Using Docker Compose - Github</a><br>
<a href="https://www.hanyibo.com/linux/bitwarden-docker-nginx-Proxy.html">使用Docker搭建Bitwarden密码存储服务器并定时备份数据库</a></p>
</blockquote>
]]></content>
    </entry>
</feed>